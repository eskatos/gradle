/*
 * Copyright 2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.internal.instrumentation.extensions.property;

import org.gradle.internal.instrumentation.api.annotations.UpgradedProperty;
import org.gradle.internal.instrumentation.processor.extensibility.AnnotatedMethodReaderExtension;
import org.gradle.internal.instrumentation.processor.modelreader.api.CallInterceptionRequestReader.Result.InvalidRequest;
import org.gradle.internal.instrumentation.processor.modelreader.impl.AnnotationUtils;
import org.objectweb.asm.Type;

import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.ExecutableElement;
import java.util.Collection;
import java.util.Collections;
import java.util.Optional;

public class PropertyUpgradeAnnotatedMethodReaderExtension implements AnnotatedMethodReaderExtension {

    static final Type DEFAULT_VALUE_TYPE = Type.getType(UpgradedProperty.DefaultValue.class);
    // TODO: Should be read from an annotation
    static final String INTERCEPTOR_JVM_DECLARATION_CLASS_NAME = "org.gradle.internal.classpath.InterceptorDeclaration_JvmBytecodeImplPropertyUpgrades";
    static final String INTERCEPTOR_GROOVY_DECLARATION_CLASS_NAME = "org.gradle.internal.classpath.InterceptorDeclaration_GroovyInterceptorsImplPropertyUpgrades";

    private final PropertyUpgradeCustomAccessorsRequestReader customAccessorsRequestReader = new PropertyUpgradeCustomAccessorsRequestReader();
    private final PropertyUpgradeAutoGeneratedAccessorsRequestReader autoGeneratedAccessorsRequestReader = new PropertyUpgradeAutoGeneratedAccessorsRequestReader();

    @Override
    public Collection<Result> readRequest(ExecutableElement method) {
        Optional<? extends AnnotationMirror> annotation = AnnotationUtils.findAnnotationMirror(method, UpgradedProperty.class);
        if (!annotation.isPresent()) {
            return Collections.emptySet();
        }

        try {
            String propertyName = getPropertyName(method);
            AnnotationMirror annotationMirror = annotation.get();
            if (customAccessorsRequestReader.hasCustomAccessors(annotationMirror)) {
                return customAccessorsRequestReader.readRequests(propertyName, method, annotationMirror);
            } else {
                return autoGeneratedAccessorsRequestReader.readRequests(propertyName, method, annotationMirror);
            }
        } catch (PropertyUpgradeCodeGenFailure failure) {
            return Collections.singletonList(new InvalidRequest(failure.reason));
        }
    }

    private static String getPropertyName(ExecutableElement method) {
        String methodName = method.getSimpleName().toString();
        String property = methodName.startsWith("is")
            ? methodName.replaceFirst("is", "")
            : methodName.replaceFirst("get", "");
        return Character.toLowerCase(property.charAt(0)) + property.substring(1);
    }
}
